version: '3.8'

# Development Docker Compose Configuration
# This file sets up the complete development environment

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: eduplatform_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/database/init:/docker-entrypoint-initdb.d
      - ./docker/database/config/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - eduplatform_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: eduplatform_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - eduplatform_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      target: development
    container_name: eduplatform_backend
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL}
    ports:
      - "8080:8080"
      - "5005:5005"  # Debug port
    volumes:
      - ./backend:/app
      - ./data/uploads:/app/uploads
      - backend_cache:/app/.gradle
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eduplatform_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: development
    container_name: eduplatform_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - REACT_APP_API_BASE_URL=http://localhost:8080/api/v1
      - REACT_APP_WEBSOCKET_URL=ws://localhost:8080/ws
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Anonymous volume for node_modules
      - frontend_cache:/app/.cache
    depends_on:
      - backend
    networks:
      - eduplatform_network
    stdin_open: true
    tty: true

  # AI Service (Python FastAPI)
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile.dev
      target: development
    container_name: eduplatform_ai
    restart: unless-stopped
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_API_TOKEN=${HUGGINGFACE_API_TOKEN}
    ports:
      - "8000:8000"
    volumes:
      - ./ai-service:/app
      - ./ai-service/models:/app/models
      - ai_cache:/app/.cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eduplatform_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional for development)
  nginx:
    image: nginx:alpine
    container_name: eduplatform_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.dev.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - ai-service
    networks:
      - eduplatform_network

  # Database Administration Tool (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: eduplatform_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@eduplatform.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - eduplatform_network

  # Redis Admin Tool (Optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: eduplatform_redis_admin
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - eduplatform_network

# Networks
networks:
  eduplatform_network:
    driver: bridge
    name: eduplatform_network

# Volumes
volumes:
  postgres_data:
    driver: local
    name: eduplatform_postgres_data
  redis_data:
    driver: local
    name: eduplatform_redis_data
  backend_cache:
    driver: local
    name: eduplatform_backend_cache
  frontend_cache:
    driver: local
    name: eduplatform_frontend_cache
  ai_cache:
    driver: local
    name: eduplatform_ai_cache
  pgadmin_data:
    driver: local
    name: eduplatform_pgadmin_data